# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateExerciseExecutionInput {
  trainingId: String!
  exerciseId: String!
  volume: Float!
  comment: String
  oneRepMax: Float
}

input CreatePlanInput {
  name: String!
  description: String
}

type Exercise {
  id: ID!
  name: String!
  type: ExerciseType!
}

type ExerciseExecution {
  id: ID!
  volume: Float!
  comment: String
  oneRepMax: Float
}

"""The type of the exercise."""
enum ExerciseType {
  PUSH
  PULL
  CARDIO
}

type Mutation {
  createPlan(properties: CreatePlanInput!): Plan!
  updatePlan(plan: UpdatePlanInput!): Plan!
  deletePlan(id: String!): String!
  addExercisesToPlan(exerciseIds: [String!]!, planId: String!): Plan!
  removeExercisesFromPlan(exerciseIds: [String!]!, planId: String!): Plan!
  updateExercise(exercise: UpdateExerciseInput!): Exercise!
  deleteExercise(id: String!): String!
  createUser(password: String!, email: String!, name: String!): User!
  updateUser(user: UserUpdates!): User!
  deleteUser(id: String!): String!
  createTraining(date: Float, planId: String!): Training!
  updateTraining: Training!
  deleteTraining(id: String!): String!
  login(password: String!, email: String!): User!
}

type Plan {
  """Id of the Plan."""
  id: ID!
  name: String!
  description: String
  user: User!
  exercises: [Exercise!]!
  trainings: [Training!]!
}

type Query {
  """Retrieves a plan by the given id."""
  plan(id: String!): Plan!

  """Retrieves a page of plans."""
  plans(take: Int = 10, skip: Int = 0): [Plan!]!
  exercise(id: String!): Exercise!
  exercises(take: Int = 10, skip: Int = 0): [Exercise!]!

  """Creates a new exercise."""
  createExercise(type: ExerciseType!, name: String!): Exercise!
  user(id: String!): User!
  users(take: Int = 10, skip: Int = 0): [User!]!
  createExerciseExecution(properties: CreateExerciseExecutionInput!): ExerciseExecution!
  traning(id: String!): Training!
  trainings(take: Int = 10, skip: Int = 0): [Training!]!
}

type Set {
  id: ID!
  nr: Float!
  weight: Float!
  reps: Int!
  targetVolumen: Float!
  targetWeight: Float!
  targetReps: Int!
  exerciseExecution: ExerciseExecution!
}

type Training {
  id: ID!
  date: Float!
  nr: Float!
  plan: Plan!
}

input UpdateExerciseInput {
  id: ID!
  name: String
  type: ExerciseType
}

input UpdatePlanInput {
  id: String!
  description: String
}

input UpdateTrainingInput {
  id: ID!
  date: Float!
  nr: Float!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: UserRole!
  plans: [Plan!]
}

"""Role of a user."""
enum UserRole {
  USER
  ADMIN
}

input UserUpdates {
  id: String!
  email: String
  name: String
  password: String
}
